From 8d09f126fdb68ae20fbfcc197f8332b36c1b63ea Mon Sep 17 00:00:00 2001
From: Claudius Heine <ch@denx.de>
Date: Wed, 31 Aug 2016 12:27:16 +0200
Subject: [PATCH 10/10] x86: efi: Add capsule update driver for Intel Quark

Based on original patch by Chee Hong Ang.

This is how to use the interface for updating the system firmware:

$ cp firmware-image.cap /lib/firmware
$ echo -n "firmware-image.cap" > /sys/firmware/efi_capsule/capsule_path
$ echo -n "1" > /sys/firmware/efi_capsule/capsule_update
$ reboot

Signed-off-by: Claudius Heine <ch@denx.de>
Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
---
 arch/x86/Kconfig                           |   4 +
 arch/x86/platform/efi/Makefile             |   1 +
 arch/x86/platform/efi/efi_capsule_update.c | 302 +++++++++++++++++++++++++++++
 3 files changed, 307 insertions(+)
 create mode 100644 arch/x86/platform/efi/efi_capsule_update.c

diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 436639a..33bf427 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -1721,6 +1721,10 @@ config EFI_MIXED
 
 	   If unsure, say N.
 
+config EFI_CAPSULE
+	bool "EFI capsule update support for Intel Quark Processor"
+	depends on EFI
+
 config SECCOMP
 	def_bool y
 	prompt "Enable seccomp to safely compute untrusted bytecode"
diff --git a/arch/x86/platform/efi/Makefile b/arch/x86/platform/efi/Makefile
index 2846aaa..7463ad2 100644
--- a/arch/x86/platform/efi/Makefile
+++ b/arch/x86/platform/efi/Makefile
@@ -2,3 +2,4 @@ obj-$(CONFIG_EFI) 		+= quirks.o efi.o efi_$(BITS).o efi_stub_$(BITS).o
 obj-$(CONFIG_ACPI_BGRT) += efi-bgrt.o
 obj-$(CONFIG_EARLY_PRINTK_EFI)	+= early_printk.o
 obj-$(CONFIG_EFI_MIXED)		+= efi_thunk_$(BITS).o
+obj-$(CONFIG_EFI_CAPSULE)	+= efi_capsule_update.o
diff --git a/arch/x86/platform/efi/efi_capsule_update.c b/arch/x86/platform/efi/efi_capsule_update.c
new file mode 100644
index 0000000..488783f
--- /dev/null
+++ b/arch/x86/platform/efi/efi_capsule_update.c
@@ -0,0 +1,302 @@
+/*
+ * Copyright(c) 2013-2015 Intel Corporation.
+ * Copyright(c) 2016 Siemens AG.
+ *
+ * Authors:
+ *  Ang, Chee Hong <chee.hong.ang@intel.com>
+ *  Claudius Heine <ch@denx.de>
+ *  Jan Kiszka <jan.kiszka@siemens.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#include <linux/errno.h>
+#include <linux/firmware.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/efi.h>
+#include <linux/slab.h>
+
+#define DRIVER_NAME	"efi_capsule_update"
+#define MAX_PATH	256
+#define MAX_CHUNK	PAGE_SIZE
+#define CSH_HDR_SIZE	0x400
+
+struct efi_blk_desc {
+	u64 length;
+	union {
+		u64 data_block;
+		u64 continuation_pointer;
+	};
+};
+
+static struct kobject *efi_capsule_kobj;
+static struct device *efi_capsule_dev;
+static struct list_head sg_list;
+static char fpath[MAX_PATH];
+static bool path_set;
+static int csh_jump = CSH_HDR_SIZE;		/* Quark EDK wants CSH jump */
+
+/**
+ * efi_capsule_trigger_update
+ *
+ * Trigger the EFI capsule update
+ */
+static int efi_capsule_trigger_update(void)
+{
+	const struct firmware *fw_entry;
+	int ret = 0;
+	u32 nblocks = 0, i = 0, total_size = 0, data_len = 0, offset = 0;
+	efi_capsule_header_t *chdr = NULL;
+	struct efi_blk_desc *desc_block = NULL;
+	u8 *data = NULL;
+
+	if (path_set == false)
+		return -ENODEV;
+
+	ret = request_firmware(&fw_entry, fpath, efi_capsule_dev);
+	if (ret || fw_entry == NULL) {
+		dev_err(efi_capsule_dev, "unable to load firmware %s\n", fpath);
+		return ret;
+	}
+
+	/* Determine necessary sizes */
+	nblocks = (fw_entry->size/MAX_CHUNK) + 2;
+	total_size = fw_entry->size;
+
+	/* Allocate array of descriptor blocks + 1 for terminator */
+	desc_block = kcalloc(nblocks, sizeof(struct efi_blk_desc), GFP_KERNEL);
+	if (desc_block == NULL) {
+		ret = -ENOMEM;
+		goto done_close;
+	}
+
+	dev_info(efi_capsule_dev, "File %s size %u descriptor blocks %u\n",
+		fpath, total_size, nblocks);
+
+	/* Read in data */
+	for (i = 0; i < nblocks && offset < total_size; i++) {
+		/* Determine read len */
+		data_len = offset < total_size - MAX_CHUNK ?
+				MAX_CHUNK : total_size - offset;
+		data = kmalloc(MAX_CHUNK, GFP_KERNEL);
+		if (data == NULL) {
+			ret = -ENOMEM;
+			goto done;
+		}
+		memcpy(data, fw_entry->data + offset, data_len);
+		offset += data_len;
+
+		/* Validate header as appropriate */
+		if (chdr == NULL) {
+			chdr = (efi_capsule_header_t *)&data[csh_jump];
+			desc_block[i].data_block = __pa(&data[csh_jump]);
+			desc_block[i].length = data_len - csh_jump;
+			dev_dbg(efi_capsule_dev,
+				"hdr offset in file %d bytes\n", csh_jump);
+			dev_dbg(efi_capsule_dev,
+				"hdr size %u flags 0x%08x imagesize 0x%08x\n",
+				chdr->headersize, chdr->flags, chdr->imagesize);
+
+		} else {
+			desc_block[i].data_block = __pa(data);
+			desc_block[i].length = data_len;
+		}
+		dev_dbg(efi_capsule_dev,
+			"block %d length %llu data @ phys 0x%08llx virt %p\n",
+			i, desc_block[i].length, desc_block[i].data_block,
+			data);
+	}
+
+	if (i > nblocks-1) {
+		dev_err(efi_capsule_dev, "Used block %d expected %d !\n", i,
+		        nblocks-1);
+		ret = -EINVAL;
+		goto done;
+	}
+
+	dev_dbg(efi_capsule_dev, "submitting capsule to EDKII firmware\n");
+
+	ret = efi.update_capsule(&chdr, 1, __pa(desc_block));
+	if (ret != EFI_SUCCESS) {
+		dev_err(efi_capsule_dev, "submission fail err=0x%08x\n", ret);
+	} else {
+		dev_dbg(efi_capsule_dev, "submission success\n");
+		ret = 0;
+	}
+
+	if (chdr != NULL && chdr->flags & 0x10000) {
+		dev_dbg(efi_capsule_dev,
+			"capsule persist across S3 skipping capsule free\n");
+		goto done_close;
+	}
+done:
+
+	for (i = 0; i < nblocks; i++) {
+		if (desc_block[i].data_block != 0)
+			kfree(phys_to_virt((u32)desc_block[i].data_block));
+	}
+
+	if (desc_block != NULL)
+		kfree(desc_block);
+done_close:
+	release_firmware(fw_entry);
+	return ret;
+}
+
+/**
+ * efi_capsule_csh_jump
+ *
+ * sysfs callback used to show current path
+ */
+static ssize_t efi_capsule_csh_jump_show(struct kobject *kobj,
+					 struct kobj_attribute *attr, char *buf)
+{
+	return snprintf(buf, sizeof(fpath), "%d\n", csh_jump > 0);
+}
+
+/**
+ * efi_capsule_path_store
+ *
+ * sysfs callback used to set a new capsule path
+ */
+static ssize_t efi_capsule_csh_jump_store(struct kobject *kobj,
+					  struct kobj_attribute *attr,
+					  const char *buf, size_t count)
+{
+	if (buf != NULL && buf[0] == '0')
+		csh_jump = 0;
+	else
+		csh_jump = CSH_HDR_SIZE;
+	return count;
+}
+
+static struct kobj_attribute efi_capsule_csh_jump_attr =
+	__ATTR(csh_jump, 0644, efi_capsule_csh_jump_show,
+	       efi_capsule_csh_jump_store);
+
+/**
+ * efi_capsule_path_show
+ *
+ * sysfs callback used to show current path
+ */
+static ssize_t efi_capsule_path_show(struct kobject *kobj,
+				     struct kobj_attribute *attr, char *buf)
+{
+	return snprintf(buf, sizeof(fpath), fpath);
+}
+
+/**
+ * efi_capsule_path_store
+ *
+ * sysfs callback used to set a new capsule path
+ */
+static ssize_t efi_capsule_path_store(struct kobject *kobj,
+				      struct kobj_attribute *attr,
+				      const char *buf, size_t count)
+{
+	if (count > MAX_PATH-1)
+		return -EINVAL;
+
+	memset(fpath, 0x00, sizeof(fpath));
+	memcpy(fpath, buf, count);
+	path_set = true;
+
+	return count;
+}
+
+static struct kobj_attribute efi_capsule_path_attr =
+	__ATTR(capsule_path, 0644, efi_capsule_path_show,
+	       efi_capsule_path_store);
+
+/**
+ * efi_capsule_update_store
+ *
+ * sysfs callback used to initiate update
+ */
+static ssize_t efi_capsule_update_store(struct kobject *kobj,
+					struct kobj_attribute *attr,
+					const char *buf, size_t count)
+{
+	int ret = 0;
+
+	ret = efi_capsule_trigger_update();
+	return ret == 0 ? count : ret;
+}
+
+static struct kobj_attribute efi_capsule_update_attr =
+	__ATTR(capsule_update, 0644, NULL, efi_capsule_update_store);
+
+static void efi_capsule_device_release(struct device *dev)
+{
+	kfree(dev);
+}
+
+/**
+ * intel_qrk_capsule_update_init
+ *
+ * @return 0 success < 0 failure
+ */
+static int __init efi_capsule_update_init(void)
+{
+	int retval = 0;
+
+	INIT_LIST_HEAD(&sg_list);
+
+	/* efi_capsule_kobj subordinate of firmware @ /sys/firmware/efi */
+	efi_capsule_kobj = kobject_create_and_add("efi_capsule", firmware_kobj);
+	if (!efi_capsule_kobj) {
+		dev_err(efi_capsule_dev, "kset create error\n");
+		retval = -ENODEV;
+		goto err;
+	}
+
+	efi_capsule_dev = kzalloc(sizeof(struct device), GFP_KERNEL);
+	if (!efi_capsule_dev) {
+		retval = -ENOMEM;
+		goto err_name;
+	}
+
+	retval = dev_set_name(efi_capsule_dev, "%s", DRIVER_NAME);
+	if (retval < 0) {
+		dev_err(efi_capsule_dev, "dev_set_name err\n");
+		goto err_dev_reg;
+	}
+
+	efi_capsule_dev->kobj.parent = efi_capsule_kobj;
+	efi_capsule_dev->groups = NULL;
+	efi_capsule_dev->release = efi_capsule_device_release;
+
+	retval = device_register(efi_capsule_dev);
+	if (retval < 0) {
+		dev_err(efi_capsule_dev, "device_register error\n");
+		goto err_dev_reg;
+	}
+
+	if (sysfs_create_file(efi_capsule_kobj, &efi_capsule_path_attr.attr) ||
+	    sysfs_create_file(efi_capsule_kobj,
+			      &efi_capsule_update_attr.attr) ||
+	    sysfs_create_file(efi_capsule_kobj,
+			      &efi_capsule_csh_jump_attr.attr)) {
+		dev_err(efi_capsule_dev, "Error adding sysfs entry!\n");
+		retval = -ENODEV;
+		goto err_dev_reg;
+	}
+	return 0;
+
+err_dev_reg:
+	put_device(efi_capsule_dev);
+err_name:
+	kfree(efi_capsule_dev);
+err:
+	return retval;
+}
+
+device_initcall(efi_capsule_update_init);
-- 
2.10.2

